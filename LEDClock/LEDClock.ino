// Generated by Glitch!
// Thu Oct 26 10:52:58 2023

#include <AS1115.h>

const uint32_t happy_frame[]  = {0x19819, 0x80000001, 0x81f8000};

#include <Arduino_LED_Matrix.h>

#include <NTPClient.h>

const uint32_t danger_frame[]  = {0x400a015, 0x1502082, 0x484047fc};

#include <WiFi.h>

#include <WiFiUdp.h>

#include <Wire.h>

const char *ntp_server  = "192.168.178.1";

const char *ssid  = "";

const char *ssid_password  = "";

const long time_offset  = -14400L;

auto as  = AS1115(0x00);

ArduinoLEDMatrix matrix;

WiFiUDP udp;

NTPClient client(udp, ntp_server, time_offset, 60000);

void prepare_time(void)
{
 char a[5] ;
 int hours  = 0;
 int minutes  = 0;
 int seconds  = 0;
 set_port(0);
 retrieve_time(hours, minutes, seconds);
 dtostrf((10 * hours + minutes / 10) / 10.0, hours < 10 ? 4 : 3, 1, a);
 as.display(a);
 set_port(1);
 dtostrf((100 * (minutes % 10) + seconds) / 100.0, 3, 2, a);
 as.display(a);
}

void retrieve_time(int &hours, int &minutes, int &seconds)
{
 auto status  = WiFi.status();
 if(status != WL_CONNECTED)
 {
  WiFi.end();
  client.end();
  status = WiFi.begin(ssid, ssid_password);
  if(WiFi.status() == WL_CONNECTED)
  {
   client.begin();
  }
 }
 if(WiFi.status() == WL_CONNECTED)
 {
  client.update();
  if(client.isTimeSet())
  {
   hours = client.getHours();
   minutes = client.getMinutes();
   seconds = client.getSeconds();
   matrix.loadFrame(happy_frame);
  }
  else
  {
   matrix.loadFrame(danger_frame);
  }
 }
 else
 {
  matrix.loadFrame(danger_frame);
 }
}

void set_port(const uint8_t i)
{
 Wire.beginTransmission(0x70);
 Wire.write(((uint8_t) 1) << i);
 Wire.endTransmission();
}

void loop(void)
{
 prepare_time();
 delay(250);
}

void setup(void)
{
 Wire.begin();
 matrix.begin();
 for(uint8_t i = 0; i < 2; i++)
 {
  set_port(i);
  as.init(3, 0);
  as.clear();
 }
}
